- name: Update packages
  ansible.builtin.apt:
    update_cache: true
    upgrade: dist

- name: Copy modprobe k8s.conf to /etc/modules-load.d
  ansible.builtin.copy:
    src: modprobe.conf
    dest: /etc/modules-load.d/k8s.conf
    owner: root
    group: root
    mode: "0644"

- name: Run modprobe overlay
  ansible.builtin.command:
    cmd: modprobe --first-time overlay
  register: modprobe_overlay
  changed_when: modprobe_overlay.stderr.find('already in kernel') == -1
  failed_when: false

- name: Run modprobe br_netfilter
  ansible.builtin.command:
    cmd: modprobe --first-time br_netfilter
  register: modprobe_br_netfilter
  changed_when: modprobe_br_netfilter.stderr.find('already in kernel') == -1
  failed_when: false

- name: Copy sysctl k8s.conf to /etc/sysctl.d/k8s.conf
  ansible.builtin.copy:
    src: sysctl.conf
    dest: /etc/sysctl.d/k8s.conf
    owner: root
    group: root
    mode: "0644"

- name: Apply sysctl settings
  ansible.builtin.command:
    cmd: sysctl --system
  changed_when: false

- name: Install containerd
  ansible.builtin.apt:
    name: containerd
    state: present

- name: Ensure /etc/containerd directory exists
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    mode: "0755"

- name: Check if config.toml exists
  ansible.builtin.stat:
    path: /etc/containerd/config.toml
  register: config_toml

- name: Copy containerd config.toml to /etc/containerd/config.toml
  ansible.builtin.shell:
    cmd: "containerd config default > /etc/containerd/config.toml"
  when: not config_toml.stat.exists

- name: Check if SystemdCgroup = false in config.toml
  ansible.builtin.shell:
    cmd: "grep -q 'SystemdCgroup = false' /etc/containerd/config.toml"
  register: systemd_cgroup
  failed_when: false
  changed_when: false

- name: Change SystemdCgroup to true in config.toml
  block:
    - name: Change SystemdCgroup to true in config.toml
      ansible.builtin.replace:
        path: /etc/containerd/config.toml
        regexp: "SystemdCgroup = false"
        replace: "SystemdCgroup = true"

    - name: Restart containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted
  when: systemd_cgroup.rc == 0

- name: Add support packages to install Kubernetes
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  with_items:
    - apt-transport-https
    - ca-certificates
    - curl
    - gpg

- name: Check if Kubernetes gpg key exists
  ansible.builtin.stat:
    path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  register: k8s_gpg_key

- name: Add Kubernetes repository key
  ansible.builtin.shell:
    cmd: "curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_base_version }}/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg"
  when: not k8s_gpg_key.stat.exists

- name: Add Kubernetes repository
  ansible.builtin.shell:
    cmd: 'echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_base_version }}/deb/ /" > /etc/apt/sources.list.d/kubernetes.list'
  changed_when: false

- name: Update apt packages
  ansible.builtin.apt:
    update_cache: true
  when: not k8s_gpg_key.stat.exists    

- name: Install Kubernetes packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present

  with_items:
    - kubelet={{ kubernetes_version }}
    - kubeadm={{ kubernetes_version }}
    # - kubectl={{ kubernetes_version }} kubectl is installed as part of kubeadm package

- name: Mark hold on Kubernetes packages
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  with_items:
    - kubelet
    - kubeadm
    - kubectl
    - containerd
